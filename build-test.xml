<project name="Idea Haxe language scripted test file" default="test" basedir=".">

    <description>
      Run "ant -f common.xml -projecthelp" for more complete project help.
    </description>

    <!-- Get the build configuration. -->
    <import file="common.xml"/>

    <path id="idea.classpath">
        <fileset dir="${idea.ultimate.build}/lib">
            <include name="*.jar"/>
        </fileset>
        <!-- import all the plugins jars, for example this is were
             Flash and Flex plugins are located -->
        <fileset dir="${idea.ultimate.build}/plugins">
            <include name="**/**.jar"/>
        </fileset>
    </path>

    <path id="classpath">
        <path refid="idea.classpath"/>
    </path>

    <path id="classpath.test">
        <pathelement location="build_test"/>
        <fileset dir="${idea.ultimate.build}/lib">
            <include name="**/*.jar" />
            <exclude name="ant/lib/**/*.jar" />
        </fileset>
        <fileset dir="${java.home}/../lib">
            <include name="**/*.jar" />
            <exclude name="missioncontrol/**" />
        </fileset>
        <fileset dir="${idea.ultimate.build}/plugins">
            <include name="**/**.jar" />
        </fileset>
    </path>

    <target name="clean" description="Clean Up: Remove test artifacts (build_test directory).">
        <delete dir="build_test" />
        <delete dir="${gen.basedir}"/>
    </target>

    <target name="init" depends="showIdeaBuild">
        <tstamp/>
        <mkdir dir="build_test"/>
    </target>

    <target name="compile_test" depends="clean,init,generateTemplatedFiles,generateParsers" description="Compile tests">

        <!-- javac2 is an intellij ant task to wrap the java compiler and add
             support to .form files and @NotNull annotations, among others -->
        <taskdef name="javac2" classname="com.intellij.ant.Javac2">
            <classpath>
                <pathelement location="${idea.ultimate.build}/lib/javac2.jar"/>
                <pathelement location="${idea.ultimate.build}/lib/forms_rt.jar"/>
                <path refid="idea.classpath"/>
            </classpath>
        </taskdef>

        <javac2
            destdir="build_test"
            classpathref="classpath"
            verbose="false"
            debug="true"
            debuglevel="lines,vars,source"
            source="${plugin.java.source.compatibility}"
            target="${plugin.java.target.compatibility}"
            includeantruntime="false" >

            <!-- <compilerarg value="-Xlint:deprecation" /> -->
            <!-- <compilerarg value="-Xlint:unchecked" /> -->

            <src path="${version.specific.code.location}" />
            <src path="src/common" />
            <src path="src/icons" />
            <src path="gen" />
            <src path="testSrc" />
            <src path="testData" />
            <src path="common/src" />
            <src path="hxcpp-debugger-protocol" />
        </javac2>

        <copy toDir="build_test">
            <fileset dir="src/common">
                <include name="**/*.properties"/>
                <include name="**/*.txt"/>
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="common/src">
                <include name="**/*.properties"/>
                <include name="**/*.txt"/>
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${basedir}/resources">
                <include name="*/**"/>
            </fileset>
            <fileset dir="gen">
              <include name="META-INF/*"/>
            </fileset>
        </copy>

    </target>

    <target name="test" depends="compile_test" description="Run the tests">

        <echo message="Running tests"/>

        <property name="suspend" value="n"/>

        <!-- On a mac, the proper JRE is included as part of the IDEA distribution. -->
        <condition property="idea.test.jvm" value="${idea.ultimate.build}/jre/jre/bin/java">
            <os family="mac"/>
        </condition>
        <property name="idea.test.jvm" value="java"/>

        <condition property="is.java8plus" value="true">
            <or>
                <equals arg1="${ant.java.version}" arg2="1.8"/>
                <equals arg1="${ant.java.version}" arg2="1.9"/>
            </or>
        </condition>
        <property name="is.java8plus" value="false"/>
        <echo level="verbose">Java version of ${ant.java.version} is Java8 or greater? ${is.java8plus}</echo>

        <!-- Tests fail with a default MaxPermSize.  They use up all of the PermGen memory. -->
        <condition property="test.extraargs" value="-XX:MaxMetaspaceSize=256M">
            <istrue value="${is.java8plus}"/>
        </condition>
        <property name="test.extraargs" value="-XX:MaxPermSize=256M"/>
        <echo level="verbose">Extra args being used on tests: ${test.extraargs}</echo>

        <junit
            haltonfailure="true"
            showoutput="no"
            failureProperty="failure_found"
            fork="yes"
            forkmode="once"
            reloading="no"
            enabletestlistenerevents="true"
            jvm="${idea.test.jvm}">

            <jvmarg value="-Didea.home.path=${idea.ultimate.build}"/>
            <jvmarg value="-Xbootclasspath/a:${idea.ultimate.build}/lib/boot.jar"/>
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            <jvmarg value="-ea"/>
            <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=${suspend},address=43251"/>
            <jvmarg value="-Didea.launcher.bin.path=${idea.ultimate.build}/bin"/>
            <jvmarg line="${test.extraargs}"/>
            <classpath refid="classpath.test"/>

            <formatter type="brief" usefile="false"/>

            <batchtest fork="yes">
                <fileset dir="testSrc">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*TestCase.java"/>
                </fileset>
            </batchtest>
        </junit>

        <fail if="failure_found" message="Unit test failures detected."/>
    </target>


</project>
